  template:
    # terraform:
    #   backend:
    #     s3:
    #       region: 'us-east-1'
    #       bucket: 'bucket-name'
    #       key: 'path/to/terraform.tfstate'
    resource:
      aws_lambda_function:
        {{ name }}:
          handler: var.{{ name }}_handler
          runtime: var.{{ name }}_runtime
          role: var.{{ name }}_role
          function_name: var.{{ name }}_function_name
          # filename: ''
          # tracing_config: 
          #   -
          #     mode: ''
          # kms_key_arn: ''
          # s3_bucket: ''
          # memory_size: 0
          # publish: false
          # layers: []
          # s3_object_version: ''
          # source_code_hash: ''
          # vpc_config: 
          #   -
          #     subnet_ids: []
          #     security_group_ids: []
          # s3_key: ''
          # dead_letter_config: 
          #   -
          #     target_arn: ''
          # reserved_concurrent_executions: 0
          # tags: 
          #   '[TO_BE_REPLACED]': ''
          # description: ''
          # environment: 
          #   -
          #     variables: 
          #       '[TO_BE_REPLACED]': ''
          # timeout: 0
    variable:
      {{ name }}_handler:
        type: string
      {{ name }}_runtime:
        type: string
      {{ name }}_role:
        type: string
      {{ name }}_function_name:
        type: string
    output:
      id:
        value: aws_lambda_function.{{ name }}.id
      thub_id:
        value: aws_lambda_function.{{ name }}.id
      arn:
        value: aws_lambda_function.{{ name }}.arn
      tracing_config:
        value: aws_lambda_function.{{ name }}.tracing_config
      source_code_hash:
        value: aws_lambda_function.{{ name }}.source_code_hash
      version:
        value: aws_lambda_function.{{ name }}.version
      last_modified:
        value: aws_lambda_function.{{ name }}.last_modified
      source_code_size:
        value: aws_lambda_function.{{ name }}.source_code_size
      invoke_arn:
        value: aws_lambda_function.{{ name }}.invoke_arn
      qualified_arn:
        value: aws_lambda_function.{{ name }}.qualified_arn

## build config
# build:
#   env:
#     variables:
#       TERRAHUB_ENV: 'dev'
#       TERRAHUB_LAMBDA_ZIP: 'nodejs8.10.zip'
#       TERRAHUB_LAMBDA_TXT: 'nodejs8.10.txt'
#       TERRAHUB_S3_PATH: 's3://'
#       TERRAHUB_BUILD_PATH: './build'
#       TERRAHUB_BUILD_OK: 'false'
#   phases:
#     pre_build:
#       commands:
#         - echo "BUILD: Running pre_build step"
#         - if [[ -f ${TERRAHUB_COMPONENT_HOME}/scripts/download.sh ]]; then ${TERRAHUB_COMPONENT_HOME}/scripts/download.sh; else ${TERRAHUB_CLI_HOME}/lib/scripts/aws/lambda_function/download.sh; fi $TERRAHUB_LAMBDA_TXT $TERRAHUB_S3_PATH/$TERRAHUB_LAMBDA_TXT
#         - if [[ -f ${TERRAHUB_COMPONENT_HOME}/scripts/compare.sh ]]; then ${TERRAHUB_COMPONENT_HOME}/scripts/compare.sh; else ${TERRAHUB_CLI_HOME}/lib/scripts/aws/lambda_function/compare.sh; fi $TERRAHUB_LAMBDA_TXT
#       finally:
#         - echo "BUILD: pre_build step successful"
#     build:
#       commands:
#         - echo "BUILD: Running build step"
#         - if [[ -f ${TERRAHUB_COMPONENT_HOME}/scripts/compile.sh ]]; then ${TERRAHUB_COMPONENT_HOME}/scripts/compile.sh; else ${TERRAHUB_CLI_HOME}/lib/scripts/aws/lambda_function/compile.sh; fi /usr/bin/env node build.js
#         - if [[ -f ${TERRAHUB_COMPONENT_HOME}/scripts/zip.sh ]]; then ${TERRAHUB_COMPONENT_HOME}/scripts/zip.sh; else ${TERRAHUB_CLI_HOME}/lib/scripts/aws/lambda_function/zip.sh; fi -j $TERRAHUB_LAMBDA_ZIP $TERRAHUB_BUILD_PATH/*.js*
#       finally:
#         - echo "BUILD: build step successful"
#     post_build:
#       commands:
#         - echo "BUILD: Running post_build step"
#         - if [[ -f ${TERRAHUB_COMPONENT_HOME}/scripts/shasum.sh ]]; then ${TERRAHUB_COMPONENT_HOME}/scripts/shasum.sh; else ${TERRAHUB_CLI_HOME}/lib/scripts/aws/lambda_function/shasum.sh; fi $TERRAHUB_LAMBDA_TXT
#         - if [[ -f ${TERRAHUB_COMPONENT_HOME}/scripts/upload.sh ]]; then ${TERRAHUB_COMPONENT_HOME}/scripts/upload.sh; else ${TERRAHUB_CLI_HOME}/lib/scripts/aws/lambda_function/upload.sh; fi $TERRAHUB_LAMBDA_ZIP $TERRAHUB_S3_PATH/$TERRAHUB_LAMBDA_ZIP
#         - if [[ -f ${TERRAHUB_COMPONENT_HOME}/scripts/upload.sh ]]; then ${TERRAHUB_COMPONENT_HOME}/scripts/upload.sh; else ${TERRAHUB_CLI_HOME}/lib/scripts/aws/lambda_function/upload.sh; fi $TERRAHUB_LAMBDA_TXT $TERRAHUB_S3_PATH/$TERRAHUB_LAMBDA_TXT
#         - rm -f .terrahub_build.env $TERRAHUB_LAMBDA_ZIP
#       finally:
#         - echo "BUILD: post_build step successful"

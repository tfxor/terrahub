  template:
    # terraform:
    #   backend:
    #     s3:
    #       region: 'us-east-1'
    #       bucket: 'bucket-name'
    #       key: 'path/to/terraform.tfstate'
    resource:
      aws_lambda_function:
        {{ name }}:
          handler: var.{{ name }}_handler
          runtime: var.{{ name }}_runtime
          role: var.{{ name }}_role
          function_name: var.{{ name }}_function_name
          # filename: ''
          # tracing_config: 
          #   -
          #     mode: ''
          # kms_key_arn: ''
          # s3_bucket: ''
          # memory_size: 0
          # publish: false
          # layers: []
          # s3_object_version: ''
          # source_code_hash: ''
          # vpc_config: 
          #   -
          #     subnet_ids: []
          #     security_group_ids: []
          # s3_key: ''
          # dead_letter_config: 
          #   -
          #     target_arn: ''
          # reserved_concurrent_executions: 0
          # tags: 
          #   '[TO_BE_REPLACED]': ''
          # description: ''
          # environment: 
          #   -
          #     variables: 
          #       '[TO_BE_REPLACED]': ''
          # timeout: 0
    variable:
      {{ name }}_handler:
        type: string
      {{ name }}_runtime:
        type: string
      {{ name }}_role:
        type: string
      {{ name }}_function_name:
        type: string
    output:
      id:
        value: aws_lambda_function.{{ name }}.id
      thub_id:
        value: aws_lambda_function.{{ name }}.id
      arn:
        value: aws_lambda_function.{{ name }}.arn
      tracing_config:
        value: aws_lambda_function.{{ name }}.tracing_config
      source_code_hash:
        value: aws_lambda_function.{{ name }}.source_code_hash
      version:
        value: aws_lambda_function.{{ name }}.version
      last_modified:
        value: aws_lambda_function.{{ name }}.last_modified
      source_code_size:
        value: aws_lambda_function.{{ name }}.source_code_size
      invoke_arn:
        value: aws_lambda_function.{{ name }}.invoke_arn
      qualified_arn:
        value: aws_lambda_function.{{ name }}.qualified_arn

## build config
# build:
#   env:
#     variables:
#       TERRAHUB_VAR_ACCOUNT_ID: $(aws sts get-caller-identity --output=text --query='Account')
#       TERRAHUB_BUILD_COMPILE_FILE: ${TERRAHUB_PROJECT_HOME}/[REPLACE_WITH_YOUR_VALUE]
#       TERRAHUB_BUILD_LOCAL_PATH: ${TERRAHUB_PROJECT_HOME}/[REPLACE_WITH_YOUR_VALUE]
#       TERRAHUB_BUILD_INDEX_FILE: nodejs14.x.txt
#       TERRAHUB_BUILD_LAMBDA_FILE: nodejs14.x.zip
#       TERRAHUB_BUILD_S3_DEPLOY: [REPLACE_WITH_YOUR_VALUE]
#       TERRAHUB_BUILD_S3_PATH: lambda/[REPLACE_WITH_YOUR_VALUE]
#       TERRAHUB_BUILD_OK: false
#   phases:
#     build:
#       commands:
#         - echo '[BUILD] Running build step'
#         - if [[ -f ${TERRAHUB_COMPONENT_HOME}/scripts/build.sh ]]; then ${TERRAHUB_COMPONENT_HOME}/scripts/build.sh; else ${TERRAHUB_CLI_HOME}/lib/scripts/aws/lambda_function/build.sh; fi || { echo >&2 "[ERROR] Failed to run 'build.sh'. Aborting..."; exit 1; }
#       finally:
#         - echo '[BUILD] Finished build step'

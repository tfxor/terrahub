  template:
    # terraform:
    #   backend:
    #     s3:
    #       region: 'us-east-1'
    #       bucket: 'bucket-name'
    #       key: 'path/to/terraform.tfstate'
    resource:
      aws_s3_bucket:
        {{ name }}:
          # bucket: ''
          # versioning: 
          #   -
          #     enabled: false
          #     mfa_delete: false
          # acceleration_status: ''
          # lifecycle_rule: 
          #   -
          #     enabled: false
          #     expiration: 
          #     date: ''
          #     days: 0
          #     expired_object_delete_marker: false
          #     id: ''
          #     prefix: ''
          #     tags: 
          #       '[TO_BE_REPLACED]': ''
          #     abort_incomplete_multipart_upload_days: 0
          # force_destroy: false
          # region: ''
          # transition: 
          #   storage_class: ''
          #   date: ''
          #   days: 0
          # noncurrent_version_transition: 
          #   storage_class: ''
          #   days: 0
          # tags: 
          #   '[TO_BE_REPLACED]': ''
          # priority: 0
          # logging: 
          #   target_bucket: ''
          #   target_prefix: ''
          # object_lock_configuration: 
          #   -
          #     object_lock_enabled: ''
          #     rule: 
          #       -
          #         default_retention: 
          #           -
          #             mode: ''
          #             days: 0
          #             years: 0
          # policy: ''
          # website_endpoint: ''
          # replication_configuration: 
          #   -
          #     role: ''
          #     rules: 
          #     destination: 
          #       bucket: ''
          #       account_id: ''
          #       storage_class: ''
          #       replica_kms_key_id: ''
          #       access_control_translation: 
          #         -
          #           owner: ''
          #     id: ''
          #     source_selection_criteria: 
          #     sse_kms_encrypted_objects: 
          #       enabled: false
          # prefix: ''
          # bucket_prefix: ''
          # arn: ''
          # cors_rule: 
          #   -
          #     allowed_methods: []
          #     allowed_origins: []
          #     allowed_headers: 
          #       -
          #     expose_headers: 
          #       -
          #     max_age_seconds: 0
          # website: 
          #   -
          #     redirect_all_requests_to: ''
          #     routing_rules: ''
          #     index_document: ''
          #     error_document: ''
          # request_payer: ''
          # hosted_zone_id: ''
          # website_domain: ''
          # filter: 
          #   -
          #     prefix: ''
          #     tags: 
          #       '[TO_BE_REPLACED]': ''
          # server_side_encryption_configuration: 
          #   -
          #     rule: 
          #       -
          #         apply_server_side_encryption_by_default: 
          #           -
          #             sse_algorithm: ''
          #             kms_master_key_id: ''
    variable:
      {{ name }}_status:
        type: string
    output:
      id:
        value: aws_s3_bucket.{{ name }}.id
      thub_id:
        value: aws_s3_bucket.{{ name }}.id
      bucket:
        value: aws_s3_bucket.{{ name }}.bucket
      versioning:
        value: aws_s3_bucket.{{ name }}.versioning
      acceleration_status:
        value: aws_s3_bucket.{{ name }}.acceleration_status
      bucket_regional_domain_name:
        value: aws_s3_bucket.{{ name }}.bucket_regional_domain_name
      region:
        value: aws_s3_bucket.{{ name }}.region
      bucket_domain_name:
        value: aws_s3_bucket.{{ name }}.bucket_domain_name
      website_endpoint:
        value: aws_s3_bucket.{{ name }}.website_endpoint
      arn:
        value: aws_s3_bucket.{{ name }}.arn
      request_payer:
        value: aws_s3_bucket.{{ name }}.request_payer
      hosted_zone_id:
        value: aws_s3_bucket.{{ name }}.hosted_zone_id
      website_domain:
        value: aws_s3_bucket.{{ name }}.website_domain

## build config
# build:
#   env:
#     variables:
#       TERRAHUB_BUILD_OK: false
#       TERRAHUB_BUILD_S3_DEPLOY: s3://
#       TERRAHUB_BUILD_INDEX_FILE: index.txt
#       TERRAHUB_BUILD_DOTENV_FILE: .env
#       TERRAHUB_BUILD_COMPILE_FILE: ${TERRAHUB_PROJECT_HOME}/bin/compile-frontend.sh
#       TERRAHUB_BUILD_LOCAL_PATH: ${TERRAHUB_PROJECT_HOME}/apps/frontend
#       TERRAHUB_BUILD_SOURCE_PATH: ${TERRAHUB_PROJECT_HOME}/apps/frontend/src
#       TERRAHUB_VAR_S3_BUCKET_NAME: s3-
#       TERRAHUB_VAR_S3_BUCKET_MAX_AGE: 600
#   phases:
#     pre_build:
#       commands:
#         - echo '[BUILD] Running pre_build step'
#       finally:
#         - echo '[BUILD] Finished pre_build step'
#     build:
#       commands:
#         - echo '[BUILD] Running build step'
#         - if [[ -f ${TERRAHUB_COMPONENT_HOME}/scripts/build.sh ]] then; ${TERRAHUB_COMPONENT_HOME}/scripts/build.sh; else ${TERRAHUB_CLI_HOME}/lib/scripts/aws/s3_bucket/build.sh || { echo >&2 "[ERROR] Failed to run 'build.sh'. Aborting..."; exit 1; }
#       finally:
#         - echo '[BUILD] Finished build step'
#     post_build:
#       commands:
#         - echo '[BUILD] Running post_build step'
#       finally:
#         - echo '[BUILD] Finished post_build step'

## hook config
#  plan:
#    before:
#      - terrahub build -i {{ name }}
#  hook:
#    apply:
#      after: if [[ -f ${TERRAHUB_COMPONENT_HOME}/scripts/upload.sh ]] then; ${TERRAHUB_COMPONENT_HOME}/scripts/upload.sh; else ${TERRAHUB_CLI_HOME}/lib/scripts/aws/s3_bucket/upload.sh $THUB_BUILD_PATH $THUB_S3_PATH --cache-control max-age=$THUB_MAX_AGE
